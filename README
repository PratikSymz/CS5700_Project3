Methodology

We are going to have three different experiments to test the effects of various components on each of the TCP flows. In order to create the simulation conditions we are going to use the NS-2 simulator. It is a good simulator to use because it is a highly modular platform that provides support for testing various network protocols, elements routing and traffic. To parse the data we are going to use python, and excel for plotting the resulting graphs.

The first two experiments are going to test four different TCP variants - Reno, NewReno, Tahoe, and Vegas. The network topology is going to be set up as shown (insert diagram here). The default CBR flow is set at 10Mbps with a propagation delay of 15ms. We are going to analyse through each experiment which conditions affect each TCP stream's usage and the fairness of bandwidth usage among the TCP flows. The default queueing algorithm used in the experiments is the DropTail algorithm. It is a simple queueing algorithm used in networks to determine when to drop packets - once the queue is filled to capacity, newer packets will be dropped until the queue has enough capacity.

Experiment 1:
In the first experiment we are analysing the effect of congestion on TCP performance. Each TCP variant will be analysed on its own with the CBR flow, so there will be only one TCP stream in the network in each simulation. The TCP stream begins at N1 and has a sink at N4. The main variable in this experiment is the CBR rate. The default is set at 10Mbps, and we will be varying the CBR starting at 1Mbps, increasing incrementally up to the bottleneck at 10Mbps. From this experiment we will analyse which variant results in the highest average throughput over time, lowest average latency, as well as lowest packet drops overall.

Experiment 2:
The second experiment will be an analysis on fairness of bandwidth usage across multiple TCP flows. We will be running a similar network topology as in experiment 1, with the addition of another TCP stream, to measure how two TCP flows running together affects bandwidth usage for each variant. One TCP stream will flow from N1 to N4, while the other TCP stream will flow from N5 to N6, with a CBR stream at N2 to N3. The main variable is the different TCP variants - we will simulate when two of the same TCP variants are running together, as well as simulating all the combinations of two different TCP variants, for example Tahoe with Tahoe, Reno with Tahoe, Reno with Vegas. In addition to changing the TCP variant combinations, we will also be varying the start times of each flow in order to get more conclusive results and to consider how one flow starting before another affects each variantâ€™s use of bandwidth. We will also vary the CBR rate for each simulation variation. From this experiment we will analyse how fair each combination of TCP variants are with each other, based on the bandwidth usage of the TCP flows during the simulations. By having variable start times we can further analyse whether that would be advantageous or not for each variant.

Experiment 3:
This experiment will test the influence of queueing techniques on TCP stream performance. We will be analysing the effect of using different queueing algorithms on TCP flow. The network topology will be the same as in experiment 1, with one TCP stream running from N1 to N4, and the CBR/UDP flow going from  N5 to N6. We will only be simulating two TCP variants in this experiment - Reno and SACK. The CBR in this experiment will remain constant at 10Mbps. The main variables are the queueing management algorithms - DropTail and RED. DropTail is a simple queueing algorithm that begins dropping packets once the queue is at full capacity, whereas RED is an active queueing management algorithm. It starts to randomly drop packets when the average queue size reaches a minimum threshold, and drops all packets when the maximum threshold is reached. Firstly, the TCP will run until it reaches a steady flow, after which we will start the CBR flow. We will analyse how the different queueing algorithms affect the flows over time. Through this experiment we can determine whether the each queueing algorithm provides fair bandwidth to each stream, as well as analysing how each algorithm affects end-to-end latency. Another observation we can achieve is the effect on the TCP flow when we start a new CBR flow. Furthermore we will be analysing whether RED is a suitable queueing algorithm to use with SACK.

